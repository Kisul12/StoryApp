console.log("Service Worker: Hello from the SW file!"),self.addEventListener("install",(e=>{console.log("Service Worker: Install event - Caching App Shell"),e.waitUntil(caches.open("story-app-shell-BARU").then((e=>(console.log("Service Worker: App Shell Caching - Adding URLs:",["/","/index.html","/app.bundle.js","/app.css","/favicon.png","/manifest.json"]),e.addAll(["/","/index.html","/app.bundle.js","/app.css","/favicon.png","/manifest.json"])))).then((()=>(console.log("Service Worker: App Shell cached successfully"),self.skipWaiting()))).catch((e=>{console.error("Service Worker: Failed to cache App Shell:",e)})))})),self.addEventListener("activate",(e=>{console.log("Service Worker: Activate event - Clearing old caches"),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if("story-app-shell-BARU"!==e)return console.log("Service Worker: Clearing old cache:",e),caches.delete(e)}))))).then((()=>self.clients.claim())))})),self.addEventListener("fetch",(e=>{console.log(`Service Worker: Fetching ${e.request.url}`),e.respondWith(caches.match(e.request).then((o=>o?(console.log(`Service Worker: Returning response from cache for ${e.request.url}`),o):(console.log(`Service Worker: No response found in cache. Fetching from network for ${e.request.url}`),fetch(e.request)))).catch((o=>{console.error(`Service Worker: Error during fetch for ${e.request.url}`,o)})))})),self.addEventListener("push",(e=>{console.log("[Service Worker] Push event received.");let o={title:"Notifikasi Baru",options:{body:"Anda memiliki pesan baru.",icon:"/favicon.png",badge:"/images/logo-48.png"}};if(e.data)try{const n=e.data.json();console.log("[Service Worker] Push data payload:",n),o.title=n.title||o.title,n.options&&(o.options.body=n.options.body||o.options.body,o.options.icon=n.options.icon||o.options.icon)}catch(n){console.error("[Service Worker] Error parsing push data as JSON, using text():",n),o.options.body=e.data.text()}else console.log("[Service Worker] Push event Punya data tapi tidak ada payload, menggunakan default.");const n=o.title,t=o.options;e.waitUntil(self.registration.showNotification(n,t))})),self.addEventListener("notificationclick",(e=>{console.log("[Service Worker] Notification click received.",e.notification),e.notification.close(),e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const o of e)if("focus"in o)return o.focus();if(clients.openWindow)return clients.openWindow("/")})))}));